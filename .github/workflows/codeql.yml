# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL Advanced"
env:
  nettleversion: 3.9.1
  mbedtlsversion: 3.6.1

on:
  push:
    branches: [ "master", "development", "special/CI*", "update/dnsmasq" ]
  pull_request:
    branches: [ "master", "development", "special/CI*", "update/dnsmasq" ]
  schedule:
    - cron: '45 10 * * 6'

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: c-cpp
          build-mode: manual
        # CodeQL supports the following values keywords for 'language': 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y  libidn2-0 libidn2-0-dev libunistring-dev

    - name: Install nettle
      run: |
        curl -sSL https://ftl.pi-hole.net/libraries/nettle-${nettleversion}.tar.gz | tar -xz
        cd nettle-${nettleversion}
        ./configure --enable-static --disable-shared --disable-openssl --disable-mini-gmp -disable-gcov --disable-documentation
        sudo make -j $(nproc) install

    - name: Install mbedTLS
    # Build static mbedTLS with pthread support
    # Disable AESNI on linux/386 asit would possibly result in an incompatible
    # binary in processors lacking the AESNI and SSE2 instruction sets
      run: |
        curl -sSL https://ftl.pi-hole.net/libraries/mbedtls-${mbedtlsversion}.tar.bz2 | tar -xj
        cd mbedtls-${mbedtlsversion}
        sed -i '/#define MBEDTLS_THREADING_C/s*^//**g' include/mbedtls/mbedtls_config.h
        sed -i '/#define MBEDTLS_THREADING_PTHREAD/s*^//**g' include/mbedtls/mbedtls_config.h
        sudo make -j $(nproc) install

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@192325c86100d080feab897ff886c34abd4c83a3 #v3.30.3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        queries: security-and-quality

    # If the analyze step fails for one of the languages you are analyzing with
    # "We were unable to automatically build your code", modify the matrix above
    # to set the build mode to "manual" for that language. Then modify this step
    # to build your code.
    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        ./build.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@192325c86100d080feab897ff886c34abd4c83a3 #v3.30.3
      with:
        category: "/language:${{matrix.language}}"
        upload: failure-only # upload only in case of failure, otherwise upload later after filtering
        output: codeql-results
    
    - name: Filter SARIF
      uses: advanced-security/filter-sarif@f3b8118a9349d88f7b1c0c488476411145b6270d #v1.0.1
      with:
        # filter out third-party dependencies
        patterns: |
          -src/dnsmasq/*
          -src/webserver/civetweb/*
          -src/webserver/cJSON/*
          -src/tre-regex/*
          -src/config/tomlc17/*
          -src/database/shell.c
          -src/database/sqlite3.c
          -src/database/sqlite3.h
          -src/zip/miniz/*
          -src/lua/*
          +src/lua/ftl_*  
        input: codeql-results/cpp.sarif
        output: codeql-results/cpp.sarif

    - name: Upload SARIF
      uses: github/codeql-action/upload-sarif@192325c86100d080feab897ff886c34abd4c83a3 #v3.30.3
      with:
        sarif_file: codeql-results/cpp.sarif

    - name: Upload CodeQL results as an artifact
      if: success() || failure()
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #v4.6.2
      with:
        name: codeql-results
        path: codeql-results
        retention-days: 5
