openapi: 3.0.2
components:
  paths:
    client:
      summary: Modify client
      parameters:
        - $ref: 'clients.yaml#/components/parameters/client'
      get:
        summary: Get clients
        tags:
          - "Client management"
        operationId: "get_clients"
        description: |
          `{client}` is optional. If it is specified, it will result in only the requested client being returned. This parameter needs to be URI-encoded.

          Valid combinations are:
          - `/api/clients` (all clients)
          - `/api/clients/my_client` (client identical to `my_client`)
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: 'clients.yaml#/components/schemas/clients/get'
                    - $ref: 'common.yaml#/components/schemas/took'
                examples:
                  clients:
                    $ref: 'clients.yaml#/components/examples/clients'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: 'common.yaml#/components/errors/unauthorized'
                    - $ref: 'common.yaml#/components/schemas/took'
      put:
        summary: Replace client
        tags:
          - "Client management"
        operationId: "replace_client"
        description: |
          Items may be updated by replacing them. `{client}` is required and needs to be URI-encoded.

          Ensure to send all the required parameters (such as `comment` or `groups`) to ensure these properties are retained.
          The read-only fields `id` and `date_added` are preserved, `date_modified` is automatically updated on success.
        requestBody:
          description: Callback payload
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'clients.yaml#/components/schemas/clients/put'
                  - $ref: 'common.yaml#/components/schemas/took'
        responses:
          '200':
            description: Created or Updated Item
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: 'clients.yaml#/components/schemas/clients/get' # identical to GET
                    - $ref: 'clients.yaml#/components/schemas/lists_processed'
                    - $ref: 'common.yaml#/components/schemas/took'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: 'common.yaml#/components/errors/bad_request'
                    - $ref: 'common.yaml#/components/schemas/took'
                examples:
                  item_missing:
                    $ref: 'clients.yaml#/components/examples/errors/uri_error/item_missing'
                  no_payload:
                    $ref: 'clients.yaml#/components/examples/errors/bad_request/no_payload'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: 'common.yaml#/components/errors/unauthorized'
                    - $ref: 'common.yaml#/components/schemas/took'
      delete:
        summary: Delete client
        tags:
          - "Client management"
        operationId: "delete_client"
        description: |
          *Note:* There will be no content on success. `{client}` is required and needs to be URI-encoded.
        responses:
          '204':
            description: Item deleted
          '404':
            description: Item not found
            content:
              application/json:
                schema:
                  $ref: 'common.yaml#/components/schemas/took'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: 'common.yaml#/components/errors/bad_request'
                    - $ref: 'common.yaml#/components/schemas/took'
                examples:
                  item_missing:
                    $ref: 'clients.yaml#/components/examples/errors/uri_error/item_missing'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: 'common.yaml#/components/errors/unauthorized'
                    - $ref: 'common.yaml#/components/schemas/took'
    suggestions:
      get:
        summary: Get client suggestions
        tags:
          - "Client management"
        operationId: "get_client_suggestions"
        description: |
          Returns a list of unconfigured clients that have been seen by Pi-hole.
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: 'clients.yaml#/components/schemas/suggestions'
                    - $ref: 'common.yaml#/components/schemas/took'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: 'common.yaml#/components/errors/unauthorized'
                    - $ref: 'common.yaml#/components/schemas/took'
    direct:
      post:
        summary: Add new client
        tags:
          - "Client management"
        operationId: "add_client"
        description: |
          Creates a new client in the `clients` object. The `{client}` itself is specified in the request body (POST JSON).

          Clients may be described either by their IP addresses (IPv4 and IPv6 are supported),
          IP subnets (CIDR notation, like `192.168.2.0/24`), their MAC addresses (like `12:34:56:78:9A:BC`), by their hostnames (like `localhost`), or by the interface they are connected to (prefaced with a colon, like `:eth0`).

          Note that client recognition by IP addresses (incl. subnet ranges) is preferred over MAC address, host name or interface recognition as the two latter will only be available after some time.
          Furthermore, MAC address recognition only works for devices at most one networking hop away from your Pi-hole.

          On success, a new resource is created at `/clients/{client}`.

          The `database_error` with message `UNIQUE constraint failed` error indicates that this client already exists.
        requestBody:
          description: Callback payload
          content:
            'application/json':
              schema:
                allOf:
                  - $ref: 'clients.yaml#/components/schemas/clients/post'
                  - $ref: 'common.yaml#/components/schemas/took'
        responses:
          '201':
            description: Created item
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: 'clients.yaml#/components/schemas/clients/get' # identical to GET
                    - $ref: 'clients.yaml#/components/schemas/lists_processed'
                    - $ref: 'common.yaml#/components/schemas/took'
            headers:
              Location:
                $ref: 'common.yaml#/components/headers/Location'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: 'common.yaml#/components/schemas/took'
                    - $ref: 'common.yaml#/components/errors/bad_request'
                examples:
                  no_payload:
                    $ref: 'clients.yaml#/components/examples/errors/bad_request/no_payload'
                  duplicate:
                    $ref: 'clients.yaml#/components/examples/errors/database_error/duplicate'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: 'common.yaml#/components/schemas/took'
                    - $ref: 'common.yaml#/components/errors/unauthorized'
    batchDelete:
      post:
        summary: Delete multiple clients
        tags:
          - "Client management"
        operationId: "batchDelete_clients"
        description: |
          Deletes multiple clients in the `clients` object. The `{client}`s themselves are specified in the request body (POST JSON).

          Clients may be described either by their IP addresses (IPv4 and IPv6 are supported),
          IP subnets (CIDR notation, like `192.168.2.0/24`), their MAC addresses (like `12:34:56:78:9A:BC`), by their hostnames (like `localhost`), or by the interface they are connected to (prefaced with a colon, like `:eth0`).</p>

          *Note:* There will be no content on success.
        requestBody:
          description: Callback payload
          required: true
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    item:
                      type: string
                      description: client IP / MAC / hostname / interface
                  required:
                    - item
                example:
                  - "item": "192.168.2.5"
                  - "item": "::1"
                  - "item": "12:34:56:78:9A:BC"
                  - "item": "localhost"
                  - "item": ":eth0"
        responses:
          '204':
            description: Items deleted
          '404':
            description: Item not found
            content:
              application/json:
                schema:
                  $ref: 'common.yaml#/components/schemas/took'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: 'common.yaml#/components/errors/bad_request'
                    - $ref: 'common.yaml#/components/schemas/took'
                examples:
                  no_payload:
                    $ref: 'clients.yaml#/components/examples/errors/bad_request/no_payload'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: 'common.yaml#/components/errors/unauthorized'
                    - $ref: 'common.yaml#/components/schemas/took'
  schemas:
    clients:
      get:
        type: object
        properties:
          clients:
            type: array
            description: Array of clients
            items:
              allOf:
                - $ref: 'clients.yaml#/components/schemas/client_object'
                - $ref: 'clients.yaml#/components/schemas/comment'
                - $ref: 'clients.yaml#/components/schemas/groups'
                - $ref: 'clients.yaml#/components/schemas/readonly'
      post:
        allOf:
          - $ref: 'clients.yaml#/components/schemas/client_maybe_array'
          - $ref: 'clients.yaml#/components/schemas/comment'
          - $ref: 'clients.yaml#/components/schemas/groups'
      put:
        allOf:
          - $ref: 'clients.yaml#/components/schemas/comment'
          - $ref: 'clients.yaml#/components/schemas/groups'
    suggestions:
      type: object
      properties:
        clients:
          type: array
          items:
            type: object
            properties:
              hwaddr:
                type: string
                nullable: true
                example: "12:34:56:78:9A:BC"
              macVendor:
                type: string
                nullable: true
                example: "Espressif Inc."
              lastQuery:
                type: integer
                example: 1683305917
              addresses:
                type: string
                nullable: true
                description: Comma-separated list of IP addresses
                example: "127.0.0.1,::1"
              names:
                type: string
                nullable: true
                description: Comma-separated list of hostnames (if available)
                example: "localhost,ip6-localhost"
    client:
      description: client IP / MAC / hostname / interface
      type: string
      example: 127.0.0.1
    client_array:
      description: array of client IPs / MACs / hostnames / interfaces
      type: array
      items:
        type: string
      example: ["127.0.0.1", "192.168.2.12"]
    client_maybe_array:
      type: object
      properties:
        client:
          oneOf:
            - $ref: 'clients.yaml#/components/schemas/client'
            - $ref: 'clients.yaml#/components/schemas/client_array'
    client_object:
      type: object
      properties:
        client:
          $ref: 'clients.yaml#/components/schemas/client'
    comment:
      type: object
      properties:
        comment:
          description: User-provided free-text comment for this client
          type: string
          nullable: true
          default: null
          example: Some comment for this client
    name:
      type: object
      properties:
        name:
          description: hostname (only available when {client} is an IP address)
          type: string
          readOnly: true
          nullable: true
          example: localhost
    groups:
      type: object
      properties:
        groups:
          description: Array of group IDs
          type: array
          default: [0]
          items:
            type: integer
    readonly:
      type: object
      properties:
        id:
          description: Database ID
          type: integer
          readOnly: true
          example: 1
        date_added:
          description: Unix timestamp of item addition
          type: integer
          readOnly: true
          example: 1611239095
        date_modified:
          description: Unix timestamp of last item modification
          type: integer
          readOnly: true
          example: 1611239099
        name:
          description: hostname (only if available)
          type: string
          readOnly: true
          nullable: true
          example: localhost
    lists_processed:
      type: object
      properties:
        processed:
          type: object
          nullable: true
          description: |
            Object containing the number of clients that were successfully
            added to the database and the number of clients that could not be
            added to the database.
          properties:
            success:
              description: |
                Array of clients that were successfully added to the database.
              type: array
              items:
                type: object
                properties:
                  item:
                    description: Client that was added to the database
                    type: string
            errors:
              description: |
                Array of errors that occurred during processing.
              type: array
              items:
                type: object
                properties:
                  item:
                    description: Client that could not be added to the database
                    type: string
                  error:
                    description: Error message
                    type: string
          example:
            success:
              - item: "127.0.0.1"
              - item: "::1"
            errors:
              - item: "192.168.2.5"
                error: "UNIQUE constraint failed: client.ip"
  examples:
    clients:
      value:
        clients:
          - client: "127.0.0.1"
            name: "localhost"
            comment: "comment"
            id: 1
            date_added: 1604871899
            date_modified: 1604871899
          - client: "::1"
            name: "ip6-localhost"
            comment: null
            id: 2
            date_added: 1611322675
            date_modified: 1611325497
        took: 0.012
        processed:
          success:
            - item: "127.0.0.1"
          failed:
            - item: "127.0.0.2"
              error: "UNIQUE constraint failed: clientlist.client"
    errors:
      uri_error:
        item_missing:
          summary: Client to be modified is missing
          value:
            error:
              key: "uri_error"
              message: "Invalid request: Specify item in URI"
              hint: null
            took: 0.003
      bad_request:
        no_payload:
          summary: No JSON payload found
          value:
            error:
              key: "bad_request"
              message: "Invalid request body data (no valid JSON)"
              hint: null
            took: 0.003
      database_error:
        duplicate:
          summary: Database error
          value:
            error:
              key: "database_error"
              message: "Could not add to gravity database"
              hint: "UNIQUE constraint failed: clientlist.client"
            took: 0.003
  parameters:
    client:
      in: path
      name: client
      schema:
        type: string
      required: true
      description: client IP / MAC / hostname / interface
      example: 127.0.0.1
